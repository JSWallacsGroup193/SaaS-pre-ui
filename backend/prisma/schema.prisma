generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String      @id @default(uuid())
  name      String      @unique
  users     UserRole[]
  permissions RolePermission[]
  createdAt DateTime    @default(now())
}

model Permission {
  id        String     @id @default(uuid())
  name      String     @unique
  description String?
  roles     RolePermission[]
  createdAt DateTime @default(now())
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  assignedAt DateTime @default(now())
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  roles         UserRole[]
  workOrders    WorkOrder[]    @relation("TechnicianWorkOrders")
  dispatchSlots DispatchSlot[]
  createdAt     DateTime       @default(now())
}

model Tenant {
  id             String          @id @default(uuid())
  name           String
  createdAt      DateTime        @default(now())
  users          User[]
  workOrders     WorkOrder[]
  accounts       Account[]
  contacts       Contact[]
  leads          Lead[]
  notes          Note[]
  skus           SKU[]
  warehouses     Warehouse[]
  stockLedgers   StockLedger[]
  purchaseOrders PurchaseOrder[]
  forecasts      Forecast[]
  chatLogs       ChatLog[]
}


model WorkOrder {
  id            String         @id @default(uuid())
  tenantId      String
  title         String
  description   String?
  status        WorkOrderStatus @default(NEW)
  technicianId  String?
  createdAt     DateTime       @default(now())
  scheduledAt   DateTime?
  dispatchedAt  DateTime?
  completedAt   DateTime?

  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  technician    User?          @relation("TechnicianWorkOrders", fields: [technicianId], references: [id])
  dispatchSlots DispatchSlot[]
}

enum WorkOrderStatus {
  NEW
  SCHEDULED
  DISPATCHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model DispatchSlot {
  id           String   @id @default(uuid())
  workOrderId  String
  technicianId String
  startTime    DateTime
  endTime      DateTime

  workOrder    WorkOrder @relation(fields: [workOrderId], references: [id])
  technician   User      @relation(fields: [technicianId], references: [id])
}

model Account {
  id        String   @id @default(uuid())
  tenantId  String
  name      String
  contacts  Contact[]
  leads     Lead[]
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model Contact {
  id        String   @id @default(uuid())
  tenantId  String
  accountId String?
  name      String
  email     String?
  phone     String?
  notes     Note[]
  leads     Lead[]
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  account   Account? @relation(fields: [accountId], references: [id])
}

model Lead {
  id         String   @id @default(uuid())
  tenantId   String
  accountId  String?
  contactId  String?
  status     LeadStatus @default(NEW)
  source     String?
  description String?
  createdAt  DateTime @default(now())

  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  account    Account? @relation(fields: [accountId], references: [id])
  contact    Contact? @relation(fields: [contactId], references: [id])
}

model Note {
  id         String   @id @default(uuid())
  tenantId   String
  contactId  String?
  content    String
  createdAt  DateTime @default(now())

  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  contact    Contact? @relation(fields: [contactId], references: [id])
}

enum LeadStatus {
  NEW
  QUALIFIED
  LOST
  WON
}

model SKU {
  id             String          @id @default(uuid())
  tenantId       String
  name           String
  description    String?
  barcode        String?         @unique
  createdAt      DateTime        @default(now())
  ledgers        StockLedger[]
  purchaseOrders PurchaseOrder[]
  forecasts      Forecast[]

  tenant         Tenant          @relation(fields: [tenantId], references: [id])
}

model Warehouse {
  id        String   @id @default(uuid())
  tenantId  String
  name      String
  bins      Bin[]
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model Bin {
  id           String        @id @default(uuid())
  warehouseId  String
  name         String
  createdAt    DateTime      @default(now())
  warehouse    Warehouse     @relation(fields: [warehouseId], references: [id])
  ledgers      StockLedger[]
}

model StockLedger {
  id        String         @id @default(uuid())
  skuId     String
  binId     String
  tenantId  String
  quantity  Int
  direction StockDirection
  note      String?
  createdAt DateTime       @default(now())

  sku       SKU            @relation(fields: [skuId], references: [id])
  bin       Bin            @relation(fields: [binId], references: [id])
  tenant    Tenant         @relation(fields: [tenantId], references: [id])
}

enum StockDirection {
  IN
  OUT
}

model PurchaseOrder {
  id         String   @id @default(uuid())
  tenantId   String
  skuId      String
  quantity   Int
  status     POStatus @default(OPEN)
  receivedAt DateTime?
  createdAt  DateTime @default(now())

  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  sku        SKU      @relation(fields: [skuId], references: [id])
}

enum POStatus {
  OPEN
  RECEIVED
  CANCELLED
}

model Forecast {
  id               String   @id @default(uuid())
  tenantId         String
  skuId            String
  avgDailyDemand   Float
  leadTimeDays     Int
  safetyFactor     Float
  reorderPoint     Float
  suggestedOrderQty Int
  updatedAt        DateTime @updatedAt

  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  sku              SKU      @relation(fields: [skuId], references: [id])

  @@unique([tenantId, skuId])
}

model ChatLog {
  id         String   @id @default(uuid())
  tenantId   String
  userPrompt String
  aiResponse String
  createdAt  DateTime @default(now())

  tenant     Tenant   @relation(fields: [tenantId], references: [id])
}
